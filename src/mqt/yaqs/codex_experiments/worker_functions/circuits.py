from qiskit import QuantumCircuit


def build_basis_noncommuting(nq: int) -> QuantumCircuit:
    qc = QuantumCircuit(nq)
    for q in range(nq):
        qc.ry(0.33, q)
        qc.rz(0.17, q)
    for q in range(0, nq - 1, 2):
        qc.rzz(0.41, q, q + 1)
    for q in range(1, nq - 1, 2):
        qc.rxx(0.37, q, q + 1)
    return qc


def x_commuting_brickwork(n_qubits: int,
                        depth: int,
                        alpha: float = 0.37,
                        beta: float = 0.28,
                        add_barriers: bool = False) -> QuantumCircuit:
    """
    A scalable circuit built from Rx and RXX gates only.
    For X-Pauli noise and Z-observables, projector unraveling attains very low variance:
    the first projector jump pins qubits into X-eigenstates and <Z> stays 0 thereafter.

    Parameters
    ----------
    n_qubits : number of qubits
    depth    : number of repeated layers
    alpha    : per-layer single-qubit Rx angle
    beta     : per-layer two-qubit RXX angle
    add_barriers : insert barriers labeled 'SAMPLE_OBSERVABLES' after each layer

    Returns
    -------
    QuantumCircuit
    """
    qc = QuantumCircuit(n_qubits)
    for layer in range(depth):
        # Local rotations generated by X (commute with X_i)
        for q in range(n_qubits):
            qc.rx(alpha, q)

        # Brickwork of RXX couplings (also commute with every X_i)
        # even bonds
        for q in range(0, n_qubits - 1, 2):
            qc.rxx(beta, q, q + 1)
        # odd bonds
        for q in range(1, n_qubits - 1, 2):
            qc.rxx(beta, q, q + 1)

        if add_barriers:
            qc.barrier(label="SAMPLE_OBSERVABLES")  # sample ⟨Z_i⟩ after each layer

    return qc


def noncommuting_layer(nq: int) -> QuantumCircuit:
    qc = QuantumCircuit(nq)
    # local rotations that do NOT commute with RZZ / RXX
    for q in range(nq):
        qc.ry(0.33, q)
        qc.rz(0.17, q)
    # mix non-commuting two-qubit gates
    for q in range(0, nq - 1, 2):
        qc.rzz(0.41, q, q + 1)
    for q in range(1, nq - 1, 2):
        qc.rxx(0.37, q, q + 1)
    return qc
